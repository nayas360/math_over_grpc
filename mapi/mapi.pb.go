// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mapi.proto

/*
Package mapi is a generated protocol buffer package.

It is generated from these files:
	mapi.proto

It has these top-level messages:
	OpRequest
	OpResponse
*/
package mapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Opcode int32

const (
	Opcode_NOP Opcode = 0
	Opcode_ADD Opcode = 1
	Opcode_SUB Opcode = 2
	Opcode_MUL Opcode = 3
	Opcode_DIV Opcode = 4
)

var Opcode_name = map[int32]string{
	0: "NOP",
	1: "ADD",
	2: "SUB",
	3: "MUL",
	4: "DIV",
}
var Opcode_value = map[string]int32{
	"NOP": 0,
	"ADD": 1,
	"SUB": 2,
	"MUL": 3,
	"DIV": 4,
}

func (x Opcode) String() string {
	return proto.EnumName(Opcode_name, int32(x))
}
func (Opcode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OpRequest struct {
	Op     Opcode `protobuf:"varint,1,opt,name=Op,enum=Opcode" json:"Op,omitempty"`
	Unary  string `protobuf:"bytes,2,opt,name=Unary" json:"Unary,omitempty"`
	Binary string `protobuf:"bytes,3,opt,name=Binary" json:"Binary,omitempty"`
}

func (m *OpRequest) Reset()                    { *m = OpRequest{} }
func (m *OpRequest) String() string            { return proto.CompactTextString(m) }
func (*OpRequest) ProtoMessage()               {}
func (*OpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpRequest) GetOp() Opcode {
	if m != nil {
		return m.Op
	}
	return Opcode_NOP
}

func (m *OpRequest) GetUnary() string {
	if m != nil {
		return m.Unary
	}
	return ""
}

func (m *OpRequest) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

type OpResponse struct {
	Result string `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *OpResponse) Reset()                    { *m = OpResponse{} }
func (m *OpResponse) String() string            { return proto.CompactTextString(m) }
func (*OpResponse) ProtoMessage()               {}
func (*OpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*OpRequest)(nil), "OpRequest")
	proto.RegisterType((*OpResponse)(nil), "OpResponse")
	proto.RegisterEnum("Opcode", Opcode_name, Opcode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MathOverGrpc service

type MathOverGrpcClient interface {
	DoOperation(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error)
}

type mathOverGrpcClient struct {
	cc *grpc.ClientConn
}

func NewMathOverGrpcClient(cc *grpc.ClientConn) MathOverGrpcClient {
	return &mathOverGrpcClient{cc}
}

func (c *mathOverGrpcClient) DoOperation(ctx context.Context, in *OpRequest, opts ...grpc.CallOption) (*OpResponse, error) {
	out := new(OpResponse)
	err := grpc.Invoke(ctx, "/MathOverGrpc/DoOperation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MathOverGrpc service

type MathOverGrpcServer interface {
	DoOperation(context.Context, *OpRequest) (*OpResponse, error)
}

func RegisterMathOverGrpcServer(s *grpc.Server, srv MathOverGrpcServer) {
	s.RegisterService(&_MathOverGrpc_serviceDesc, srv)
}

func _MathOverGrpc_DoOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathOverGrpcServer).DoOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MathOverGrpc/DoOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathOverGrpcServer).DoOperation(ctx, req.(*OpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MathOverGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MathOverGrpc",
	HandlerType: (*MathOverGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoOperation",
			Handler:    _MathOverGrpc_DoOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapi.proto",
}

func init() { proto.RegisterFile("mapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x37, 0xa9, 0x76, 0xe9, 0xac, 0x48, 0x08, 0xa2, 0x8b, 0xa7, 0xa5, 0x78, 0x28, 0x1e,
	0x72, 0x58, 0x11, 0xbc, 0xba, 0x04, 0x44, 0x70, 0x8d, 0x44, 0xea, 0x3d, 0xd6, 0x80, 0x05, 0x6d,
	0xc6, 0x24, 0x15, 0xfc, 0xf7, 0x92, 0xb4, 0xe8, 0xed, 0xfb, 0x1e, 0xe1, 0x65, 0x1e, 0xc0, 0xa7,
	0xc1, 0x5e, 0xa0, 0x77, 0xd1, 0xd5, 0x1a, 0x2a, 0x85, 0xda, 0x7e, 0x8d, 0x36, 0x44, 0x7e, 0x06,
	0x54, 0xe1, 0x9a, 0x6c, 0x48, 0x73, 0xbc, 0x5d, 0x0a, 0x85, 0x9d, 0x7b, 0xb3, 0x9a, 0x2a, 0xe4,
	0x27, 0x70, 0xd8, 0x0e, 0xc6, 0xff, 0xac, 0xe9, 0x86, 0x34, 0x95, 0x9e, 0x84, 0x9f, 0x42, 0xb9,
	0xeb, 0x73, 0x5c, 0xe4, 0x78, 0xb6, 0xfa, 0x02, 0x20, 0x75, 0x06, 0x74, 0x43, 0xb0, 0xe9, 0x95,
	0xb6, 0x61, 0xfc, 0x88, 0xb9, 0xb8, 0xd2, 0xb3, 0x5d, 0x5e, 0x43, 0x39, 0xfd, 0xc0, 0x97, 0x50,
	0x3c, 0xaa, 0x27, 0xb6, 0x48, 0x70, 0x2b, 0x25, 0x23, 0x09, 0x9e, 0xdb, 0x1d, 0xa3, 0x09, 0xf6,
	0xed, 0x03, 0x2b, 0x12, 0xc8, 0xfb, 0x17, 0x76, 0xb0, 0xbd, 0x81, 0xa3, 0xbd, 0x89, 0xef, 0xea,
	0xdb, 0xfa, 0x3b, 0x8f, 0x1d, 0x6f, 0x60, 0x25, 0x9d, 0x42, 0xeb, 0x4d, 0xec, 0xdd, 0xc0, 0x41,
	0xfc, 0xcd, 0x39, 0x5f, 0x89, 0xff, 0x33, 0xea, 0xc5, 0x6b, 0x99, 0x17, 0x5f, 0xfd, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x00, 0xe9, 0xb1, 0x9f, 0xff, 0x00, 0x00, 0x00,
}
